{
  "qa": [
    {
      "question": "What is the difference between '==' and '===' in JavaScript?",
      "answer": "'==' checks for equality with type coercion, while '===' checks for equality without type coercion (strict equality)."
    },
    {
      "question": "What is a closure in JavaScript?",
      "answer": "A closure is a function that retains access to its lexical scope even after the function has finished executing."
    },
    {
      "question": "Explain event delegation in JavaScript.",
      "answer": "Event delegation involves using a single event listener on a parent element to manage events for multiple child elements, improving performance and memory usage."
    },
    {
      "question": "What are JavaScript promises and how do they work?",
      "answer": "Promises represent the eventual completion (or failure) of an asynchronous operation and its resulting value. They have three states: pending, fulfilled, and rejected."
    },
    {
      "question": "What is the 'this' keyword in JavaScript?",
      "answer": "'this' refers to the object that is currently executing the code. Its value depends on the context in which it is used (e.g., in a method, a constructor, or a global scope)."
    },
    {
      "question": "What is JSX in React?",
      "answer": "JSX (JavaScript XML) is a syntax extension that allows you to write HTML-like code within JavaScript, which React transforms into JavaScript."
    },
    {
      "question": "What are React hooks?",
      "answer": "React hooks are functions that let you use state and other React features in functional components."
    },
    {
      "question": "What is the Virtual DOM in React?",
      "answer": "The Virtual DOM is a lightweight copy of the actual DOM. React uses it to efficiently update the UI by comparing the virtual DOM with the real DOM and only applying the necessary changes."
    },
    {
      "question": "What is a pure function in JavaScript?",
      "answer": "A pure function is a function that always returns the same output for the same input and has no side effects (it doesn't alter any external state)."
    },
    {
      "question": "What is the purpose of `useState` in React?",
      "answer": "`useState` is a hook that allows you to add state to functional components in React."
    },
    {
      "question": "What is the difference between `props` and `state` in React?",
      "answer": "`props` are inputs to a component that are passed down from a parent component, while `state` is managed within the component and can change over time."
    },
    {
      "question": "How does React handle updates to state and props?",
      "answer": "React schedules updates and efficiently reconciles the changes by using a virtual DOM to compare previous and current states and only updating what has changed."
    },
    {
      "question": "What is the `useEffect` hook used for in React?",
      "answer": "`useEffect` is used to handle side effects in functional components, such as fetching data or directly interacting with the DOM."
    },
    {
      "question": "What is the `useContext` hook in React?",
      "answer": "`useContext` allows you to access context values directly from functional components without needing to use the `Context.Consumer` component."
    },
    {
      "question": "What is `event.preventDefault()` in JavaScript?",
      "answer": "`event.preventDefault()` is a method that stops the default action of an element from happening, such as preventing a form submission."
    }
  ]
}
